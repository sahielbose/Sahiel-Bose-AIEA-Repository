Sahiel Bose
April 9, 2025


LLM + Logic Task 6 Writeup


Deontic logic is just a way to write rules with symbols instead of long sentences. Instead of thinking “true” or “false,” you talk about what must happen, what may happen, and what is not allowed. Three little marks do all the work: O p means “p is obligatory,” P p means “p is permitted,” and F p means “p is forbidden.” There are many ways this logic is linked. When something is permitted when the opposite is not obligatory, so P p is really “not O not p.” And something is forbidden when the opposite is obligatory, so F p is “O not p.” With the symbols set, you start writing rules the same way you write plain logic sentences, just drop them under O, P, or F. For example, O (clean_room) says the room has to be cleaned. P (play_games) says playing games is okay. You can nest rules with O (clean_room → watch_TV), which means that watching TV is required whenever the room gets cleaned. These short sentences like clean_room, pay_tax, eat_food are useful so you can see the rule list. The next step is reasoning following the rules. Deontic logic brings with it a traditional modal axiom which goes by K: "ought (p → q)" being true, and "ought p" being true implies "ought q." When you read this in practice you think of it in these terms: driving is obligatory, and "if you drive you must buckle up" is further obligatory, so buckling up is obligatory. The K rule is simply distributivity of obligation under implication, but it powers most of the everyday proofs, and software tools like Prolog or SMT solvers can run the rule "for you," like we will see later in this chapter, so you do not need to push the symbols around by hand. Standard deontic logic stumbles across so-called contrary-to-duty cases. A famous example is "it is forbidden to smoke and, should you smoke, you must smoke politely." When we want to discuss rules that only instantiate once a condition is satisfied, we switch to dyadic notation and write O (use_ashtray | smoke). Read that as, "given that you smoke, using an ashtray is obligatory." Because the condition falls outside the O-operator, the logic no longer mandates the odd jump from a blanket prohibition on smoking to a blanket obligation to smoke politely; the additional obligation instead lives only in the smoke-worlds. When many obligations, permissions, and prohibitions build up, do a quick consistency check: if you can derive both O p and F p, the system requires and forbids the same action, meaning a rule has to change. Stick with the compact vocabulary (drive, pay_tax), label each clause with one of O, P, or F instantly, and rely on the K rule as well as the duality shortcuts to derive consequences. With these steps, you can formulate, test, and revise a rulebook just as you would troubleshoot a brief program—only the "bugs" are contradicting duties and the output is an ordered set of norms that make sense together.